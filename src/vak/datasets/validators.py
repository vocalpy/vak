"""Validators used with metadata"""
def is_valid_dataset_csv_filename(instance, attribute, value):
    valid = "_prep_" in value and value.endswith(".csv")
    if not valid:
        raise ValueError(
            f"Invalid dataset csv filename: {value}."
            f'Filename should contain the string "_prep_" '
            f"and end with the extension .csv."
            f"Valid filenames are generated by "
            f"vak.core.prep.generate_dataset_csv_filename"
        )


def is_valid_audio_format(instance, attribute, value):
    import vak.common.constants

    if value not in vak.common.constants.VALID_AUDIO_FORMATS:
        raise ValueError(
            f"Not a valid audio format: {value}. Valid audio formats are: {vak.common.constants.VALID_AUDIO_FORMATS}"
        )


def is_valid_spect_format(instance, attribute, value):
    import vak.common.constants

    if value not in vak.common.constants.VALID_SPECT_FORMATS:
        raise ValueError(
            f"Not a valid spectrogram format: {value}. "
            f"Valid spectrogram formats are: {vak.common.constants.VALID_SPECT_FORMATS}"
        )


def is_valid_shape(instance, attribute, value):
    if not isinstance(value, tuple):
        raise TypeError(
            f"`shape` should be a tuple but type was: {type(value)}"
        )
    if not all([isinstance(val, int) and val > 0 for val in value]):
        raise ValueError(
            f"All values of `shape` should be positive integers but values were: {value}"
        )
